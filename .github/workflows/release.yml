name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify tag format
      run: |
        if [[ ! ${{ github.ref_name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?$ ]]; then
          echo "Invalid tag format: ${{ github.ref_name }}"
          exit 1
        fi

    - name: Check release notes
      run: |
        if [[ ! -f "releases/${{ github.ref_name }}.md" ]]; then
          echo "Release notes not found: releases/${{ github.ref_name }}.md"
          exit 1
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Test Docker Compose
      run: |
        # Test that docker-compose.yml is valid
        docker compose config

    - name: Create GitHub Release
      uses: gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        release_name: XiansAi Platform ${{ github.ref_name }}
        body_path: releases/${{ github.ref_name }}.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Docker Compose tags
      run: |
        # This step would update docker-compose.yml with the new version
        # Implementation depends on your Docker image naming convention
        echo "Docker images for ${{ github.ref_name }} should be available"

    - name: Notify success
      run: |
        echo "Release ${{ github.ref_name }} completed successfully!"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" 