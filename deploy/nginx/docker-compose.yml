# XiansAi Production Nginx with Let's Encrypt
# This docker-compose file sets up Nginx with automatic SSL certificate management

version: '3.8'

services:
  # Nginx Reverse Proxy with SSL Termination
  nginx:
    image: nginx:1.25-alpine
    container_name: xiansai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Nginx configuration
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./conf.d:/etc/nginx/conf.d:ro
      
      # SSL certificates (managed by Certbot)
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      
      # Logs
      - nginx_logs:/var/log/nginx
    environment:
      # Pass environment variables to Nginx config
      - DOMAIN=${DOMAIN}
      - UI_PORT=${UI_PORT:-8080}
      - SERVER_PORT=${SERVER_PORT:-8080}
      - KEYCLOAK_PORT=${KEYCLOAK_PORT:-8080}
      - TEMPORAL_PORT=${TEMPORAL_PORT:-8080}
      - CLIENT_MAX_BODY_SIZE=${CLIENT_MAX_BODY_SIZE:-100M}
      - RATE_LIMIT_UI=${RATE_LIMIT_UI:-10}
      - RATE_LIMIT_API=${RATE_LIMIT_API:-30}
      - RATE_LIMIT_AUTH=${RATE_LIMIT_AUTH:-5}
    networks:
      - nginx-proxy
      - xiansai-backend
    depends_on:
      - certbot
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.xiansai.service=nginx"
      - "com.xiansai.description=Production Nginx reverse proxy with SSL"

  # Certbot for Let's Encrypt SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: xiansai-certbot
    restart: unless-stopped
    volumes:
      # Certificate storage
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./certbot/logs:/var/log/letsencrypt
    environment:
      - DOMAIN=${DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - STAGING=${STAGING:-false}
    command: >
      sh -c "
        echo 'Waiting for nginx to start...' &&
        sleep 30 &&
        echo 'Starting certificate management...' &&
        while :; do
          if [ \"$$STAGING\" = \"true\" ]; then
            echo 'Running in staging mode...'
            certbot certonly --webroot --webroot-path=/var/www/certbot 
              --email $$LETSENCRYPT_EMAIL --agree-tos --no-eff-email --staging
              -d $$DOMAIN -d www.$$DOMAIN -d api.$$DOMAIN -d auth.$$DOMAIN -d temporal.$$DOMAIN
          else
            echo 'Running in production mode...'
            certbot certonly --webroot --webroot-path=/var/www/certbot 
              --email $$LETSENCRYPT_EMAIL --agree-tos --no-eff-email --force-renewal
              -d $$DOMAIN -d www.$$DOMAIN -d api.$$DOMAIN -d auth.$$DOMAIN -d temporal.$$DOMAIN
          fi
          echo 'Sleeping for 12 hours before next renewal check...'
          sleep 12h
        done
      "
    networks:
      - nginx-proxy
    labels:
      - "com.xiansai.service=certbot"
      - "com.xiansai.description=Let's Encrypt certificate manager"

  # Configuration processor (runs once to process templates)
  config-processor:
    image: alpine:3.18
    container_name: xiansai-config-processor
    volumes:
      - ./conf.d:/etc/nginx/conf.d
    environment:
      - DOMAIN=${DOMAIN}
      - UI_PORT=${UI_PORT:-8080}
      - SERVER_PORT=${SERVER_PORT:-8080}
      - KEYCLOAK_PORT=${KEYCLOAK_PORT:-8080}
      - TEMPORAL_PORT=${TEMPORAL_PORT:-8080}
      - CLIENT_MAX_BODY_SIZE=${CLIENT_MAX_BODY_SIZE:-100M}
      - RATE_LIMIT_UI=${RATE_LIMIT_UI:-10}
      - RATE_LIMIT_API=${RATE_LIMIT_API:-30}
      - RATE_LIMIT_AUTH=${RATE_LIMIT_AUTH:-5}
    command: >
      sh -c "
        echo 'Installing envsubst...' &&
        apk add --no-cache gettext &&
        echo 'Processing Nginx configuration templates...' &&
        envsubst '$$DOMAIN $$UI_PORT $$SERVER_PORT $$KEYCLOAK_PORT $$TEMPORAL_PORT $$CLIENT_MAX_BODY_SIZE $$RATE_LIMIT_UI $$RATE_LIMIT_API $$RATE_LIMIT_AUTH' 
          < /etc/nginx/conf.d/xiansai.conf.template 
          > /etc/nginx/conf.d/xiansai.conf &&
        echo 'Configuration processed successfully!' &&
        echo 'Generated configuration:' &&
        cat /etc/nginx/conf.d/xiansai.conf | head -20
      "
    restart: "no"
    labels:
      - "com.xiansai.service=config-processor"
      - "com.xiansai.description=Processes Nginx configuration templates"

networks:
  # Network for Nginx and Certbot
  nginx-proxy:
    driver: bridge
    name: xiansai-nginx-proxy
    
  # External network to connect to XiansAi services
  xiansai-backend:
    external: true
    name: ${NETWORK_NAME:-xians-community-edition-network}

volumes:
  # Nginx logs
  nginx_logs:
    name: xiansai-nginx-logs
    driver: local
